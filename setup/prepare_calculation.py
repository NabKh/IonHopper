# bhmc/setup/prepare_calculation.py
"""Setup utility for BHMC-VASP calculations.

Handles file preparation and structure preprocessing for BHMC calculations.
"""

import ase.io
from ase.io.vasp import write_vasp
from pathlib import Path
import shutil
import numpy as np
from typing import List, Dict
import yaml
import logging

class VASPSetup:
    """Prepares VASP input files and structure data for BHMC."""
    
    def __init__(self, config_file: str = "config.yaml"):
        with open(config_file) as f:
            self.config = yaml.safe_load(f)
        
        self.potcar_path = Path(self.config['potcar_path'])
        self.structure_file = Path(self.config['structure_file'])
        
        logging.basicConfig(level=logging.INFO)
        
    def prepare_files(self, work_dir: Path):
        """Main setup routine."""
        work_dir.mkdir(exist_ok=True)
        
        logging.info(f"Reading structure from {self.structure_file}")
        structure = ase.io.read(self.structure_file)
        
        logging.info("Processing structure components")
        self._split_structure(structure, work_dir)
        self._generate_kpoints(structure, work_dir)
        self._generate_incar(work_dir)
        self._generate_potcar(structure.get_chemical_symbols(), work_dir)
        
        logging.info(f"Setup complete in {work_dir}")

    def _split_structure(self, structure: ase.Atoms, work_dir: Path):
        """Split POSCAR into components."""
        symbols = structure.get_chemical_symbols()
        positions = structure.get_positions()
        
        mobile_element = self.config['mobile_element']
        mobile_indices = [i for i, s in enumerate(symbols) if s == mobile_element]
        
        base_pos = positions[mobile_indices[:self.config['base_sites']]]
        lattice_pos = positions[mobile_indices]
        host_pos = positions[[i for i in range(len(symbols)) 
                            if i not in mobile_indices]]
        
        np.savetxt(work_dir / 'base', base_pos, fmt='%.10f')
        np.savetxt(work_dir / 'lattice1', lattice_pos, fmt='%.10f')
        np.savetxt(work_dir / 'host', host_pos, fmt='%.10f')

    def _generate_kpoints(self, structure: ase.Atoms, work_dir: Path):
        """Generate KPOINTS file."""
        cell = structure.get_cell()
        kspacing = self.config.get('kspacing', 0.2)
        kpoints = np.ceil(np.linalg.norm(cell, axis=1) / kspacing)
        
        with open(work_dir / 'KPOINTS', 'w') as f:
            f.write("Automatic mesh\n0\nGamma\n")
            f.write(f"{int(kpoints[0])} {int(kpoints[1])} {int(kpoints[2])}\n")
            f.write("0 0 0\n")

    def _generate_incar(self, work_dir: Path):
        """Create INCAR from template."""
        incar_settings = self.config['incar']
        with open(work_dir / 'INCAR', 'w') as f:
            f.write(f"# Generated by BHMC-VASP\n")
            for key, value in incar_settings.items():
                if isinstance(value, bool):
                    f.write(f"{key} = {'.TRUE.' if value else '.FALSE.'}\n")
                else:
                    f.write(f"{key} = {value}\n")

    def _generate_potcar(self, elements: List[str], work_dir: Path):
        """Concatenate POTCAR files."""
        unique_elements = list(dict.fromkeys(elements))
        potcar_files = []
        
        for element in unique_elements:
            potcar_file = self.potcar_path / element / 'POTCAR'
            if not potcar_file.exists():
                raise FileNotFoundError(f"POTCAR for {element} not found")
            potcar_files.append(potcar_file)
        
        with open(work_dir / 'POTCAR', 'wb') as outfile:
            for potcar in potcar_files:
                with open(potcar, 'rb') as infile:
                    shutil.copyfileobj(infile, outfile)

def main():
    """CLI entry point."""
    setup = VASPSetup()
    setup.prepare_files(Path.cwd())

if __name__ == "__main__":
    main()